# -*- coding: utf-8 -*-

"""
spotifywebapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from spotifywebapi.api_helper import APIHelper


class ExplicitContentSettingsObject(object):

    """Implementation of the 'ExplicitContentSettingsObject' model.

    Attributes:
        filter_enabled (bool): When `true`, indicates that explicit content
            should not be played.
        filter_locked (bool): When `true`, indicates that the explicit content
            setting is locked and can't be changed by the user.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "filter_enabled": 'filter_enabled',
        "filter_locked": 'filter_locked'
    }

    _optionals = [
        'filter_enabled',
        'filter_locked',
    ]

    def __init__(self,
                 filter_enabled=APIHelper.SKIP,
                 filter_locked=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the ExplicitContentSettingsObject class"""

        # Initialize members of the class
        if filter_enabled is not APIHelper.SKIP:
            self.filter_enabled = filter_enabled 
        if filter_locked is not APIHelper.SKIP:
            self.filter_locked = filter_locked 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        filter_enabled = dictionary.get("filter_enabled") if "filter_enabled" in dictionary.keys() else APIHelper.SKIP
        filter_locked = dictionary.get("filter_locked") if "filter_locked" in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(filter_enabled,
                   filter_locked,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'filter_enabled={(self.filter_enabled if hasattr(self, "filter_enabled") else None)!r}, '
                f'filter_locked={(self.filter_locked if hasattr(self, "filter_locked") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'filter_enabled={(self.filter_enabled if hasattr(self, "filter_enabled") else None)!s}, '
                f'filter_locked={(self.filter_locked if hasattr(self, "filter_locked") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
