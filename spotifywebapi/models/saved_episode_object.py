# -*- coding: utf-8 -*-

"""
spotifywebapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from spotifywebapi.api_helper import APIHelper
from spotifywebapi.models.episode_object import EpisodeObject


class SavedEpisodeObject(object):

    """Implementation of the 'SavedEpisodeObject' model.

    Attributes:
        added_at (datetime): The date and time the episode was saved.
            Timestamps are returned in ISO 8601 format as Coordinated
            Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
        episode (EpisodeObject): Information about the episode.
        additional_properties (Dict[str, Any]): The additional properties for
            the model.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "added_at": 'added_at',
        "episode": 'episode'
    }

    _optionals = [
        'added_at',
        'episode',
    ]

    def __init__(self,
                 added_at=APIHelper.SKIP,
                 episode=APIHelper.SKIP,
                 additional_properties=None):
        """Constructor for the SavedEpisodeObject class"""

        # Initialize members of the class
        if added_at is not APIHelper.SKIP:
            self.added_at = APIHelper.apply_datetime_converter(added_at, APIHelper.RFC3339DateTime) if added_at else None 
        if episode is not APIHelper.SKIP:
            self.episode = episode 

        # Add additional model properties to the instance
        if additional_properties is None:
            additional_properties = {}
        self.additional_properties = additional_properties

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        added_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("added_at")).datetime if dictionary.get("added_at") else APIHelper.SKIP
        episode = EpisodeObject.from_dictionary(dictionary.get('episode')) if 'episode' in dictionary.keys() else APIHelper.SKIP
        additional_properties = APIHelper.get_additional_properties(
            dictionary={k: v for k, v in dictionary.items() if k not in cls._names.values()},
            unboxing_function=lambda value: value)
        # Return an object of this model
        return cls(added_at,
                   episode,
                   additional_properties)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'added_at={(self.added_at if hasattr(self, "added_at") else None)!r}, '
                f'episode={(self.episode if hasattr(self, "episode") else None)!r}, '
                f'additional_properties={self.additional_properties!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'added_at={(self.added_at if hasattr(self, "added_at") else None)!s}, '
                f'episode={(self.episode if hasattr(self, "episode") else None)!s}, '
                f'additional_properties={self.additional_properties!s})')
