# -*- coding: utf-8 -*-

"""
spotifywebapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from spotifywebapi.configuration import Configuration
from spotifywebapi.apis.base_api import BaseApi
from spotifywebapi.configuration import Environment
from spotifywebapi.http.auth.oauth_2 import Oauth2
from spotifywebapi.apis.albums_api import AlbumsApi
from spotifywebapi.apis.artists_api import ArtistsApi
from spotifywebapi.apis.audiobooks_api import AudiobooksApi
from spotifywebapi.apis.categories_api import CategoriesApi
from spotifywebapi.apis.chapters_api import ChaptersApi
from spotifywebapi.apis.episodes_api import EpisodesApi
from spotifywebapi.apis.genres_api import GenresApi
from spotifywebapi.apis.markets_api import MarketsApi
from spotifywebapi.apis.player_api import PlayerApi
from spotifywebapi.apis.playlists_api import PlaylistsApi
from spotifywebapi.apis.search_api import SearchApi
from spotifywebapi.apis.shows_api import ShowsApi
from spotifywebapi.apis.tracks_api import TracksApi
from spotifywebapi.apis.users_api import UsersApi
from spotifywebapi.apis.oauth_authorization_api import OauthAuthorizationApi


class SpotifywebapiClient(object):
    @LazyProperty
    def albums(self):
        return AlbumsApi(self.global_configuration)

    @LazyProperty
    def artists(self):
        return ArtistsApi(self.global_configuration)

    @LazyProperty
    def audiobooks(self):
        return AudiobooksApi(self.global_configuration)

    @LazyProperty
    def categories(self):
        return CategoriesApi(self.global_configuration)

    @LazyProperty
    def chapters(self):
        return ChaptersApi(self.global_configuration)

    @LazyProperty
    def episodes(self):
        return EpisodesApi(self.global_configuration)

    @LazyProperty
    def genres(self):
        return GenresApi(self.global_configuration)

    @LazyProperty
    def markets(self):
        return MarketsApi(self.global_configuration)

    @LazyProperty
    def player(self):
        return PlayerApi(self.global_configuration)

    @LazyProperty
    def playlists(self):
        return PlaylistsApi(self.global_configuration)

    @LazyProperty
    def search(self):
        return SearchApi(self.global_configuration)

    @LazyProperty
    def shows(self):
        return ShowsApi(self.global_configuration)

    @LazyProperty
    def tracks(self):
        return TracksApi(self.global_configuration)

    @LazyProperty
    def users(self):
        return UsersApi(self.global_configuration)

    @LazyProperty
    def oauth_authorization(self):
        return OauthAuthorizationApi(self.global_configuration)

    @property
    def oauth_2_0(self):
        return self.auth_managers['oauth_2_0']

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=30, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 logging_configuration=None, environment=Environment.PRODUCTION,
                 client_credentials_auth_credentials=None, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            logging_configuration=logging_configuration,
            environment=environment,
            client_credentials_auth_credentials=client_credentials_auth_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseApi.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseApi.user_agent(), BaseApi.user_agent_parameters())

        self.auth_managers = {key: None for key in ['oauth_2_0']}
        self.auth_managers['oauth_2_0'] = Oauth2(
            self.config.client_credentials_auth_credentials,
            self.global_configuration)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

